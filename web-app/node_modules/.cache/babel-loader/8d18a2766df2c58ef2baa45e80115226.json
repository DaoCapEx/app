{"ast":null,"code":"import { takeEvery, put, call, all, fork } from \"redux-saga/effects\"; // Calender Redux States\n\nimport { ADD_NEW_EVENT, DELETE_EVENT, GET_CATEGORIES, GET_EVENTS, UPDATE_EVENT } from \"./actionTypes\";\nimport { apiSuccess, apiFail, updateEventSuccess, updateEventFail, deleteEventSuccess, deleteEventFail, getCategoriesSuccess, getCategoriesFail } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getEvents, addNewEvent, updateEvent, deleteEvent, getCategories } from \"../../helpers/fakebackend_helper\";\n\nfunction* fetchEvents() {\n  try {\n    const response = yield call(getEvents);\n    yield put(apiSuccess(GET_EVENTS, response));\n  } catch (error) {\n    yield put(apiFail(GET_EVENTS, error));\n  }\n}\n\nfunction* onAddNewEvent(_ref) {\n  let {\n    payload: event\n  } = _ref;\n\n  try {\n    const response = yield call(addNewEvent, event);\n    yield put(apiSuccess(ADD_NEW_EVENT, response));\n  } catch (error) {\n    yield put(apiFail(ADD_NEW_EVENT, error));\n  }\n}\n\nfunction* onUpdateEvent(_ref2) {\n  let {\n    payload: event\n  } = _ref2;\n\n  try {\n    const response = yield call(updateEvent, event);\n    yield put(updateEventSuccess(response));\n  } catch (error) {\n    yield put(updateEventFail(error));\n  }\n}\n\nfunction* onDeleteEvent(_ref3) {\n  let {\n    payload: event\n  } = _ref3;\n\n  try {\n    const response = yield call(deleteEvent, event);\n    yield put(deleteEventSuccess(response));\n  } catch (error) {\n    yield put(deleteEventFail(error));\n  }\n}\n\nfunction* onGetCategories() {\n  try {\n    const response = yield call(getCategories);\n    yield put(getCategoriesSuccess(response));\n  } catch (error) {\n    yield put(getCategoriesFail(error));\n  }\n}\n\nexport function* watchFetchEvents() {\n  yield takeEvery(GET_EVENTS, fetchEvents);\n}\nexport function* watchOnAddNewEvent() {\n  yield takeEvery(ADD_NEW_EVENT, onAddNewEvent);\n}\nexport function* watchOnUpdateEvent() {\n  yield takeEvery(UPDATE_EVENT, onUpdateEvent);\n}\nexport function* watchOnDeleteEvent() {\n  yield takeEvery(DELETE_EVENT, onDeleteEvent);\n}\nexport function* watchOnGetCategories() {\n  yield takeEvery(GET_CATEGORIES, onGetCategories);\n}\n\nfunction* calendarSaga() {\n  yield all([fork(watchFetchEvents)]);\n  yield all([fork(watchOnAddNewEvent)]);\n  yield all([fork(watchOnUpdateEvent)]);\n  yield all([fork(watchOnDeleteEvent)]);\n  yield all([fork(watchOnGetCategories)]);\n}\n\nexport default calendarSaga;","map":{"version":3,"sources":["/Users/nawazdhandala/Documents/Projects/DCX/app/src/store/calendar/saga.js"],"names":["takeEvery","put","call","all","fork","ADD_NEW_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_EVENTS","UPDATE_EVENT","apiSuccess","apiFail","updateEventSuccess","updateEventFail","deleteEventSuccess","deleteEventFail","getCategoriesSuccess","getCategoriesFail","getEvents","addNewEvent","updateEvent","deleteEvent","getCategories","fetchEvents","response","error","onAddNewEvent","payload","event","onUpdateEvent","onDeleteEvent","onGetCategories","watchFetchEvents","watchOnAddNewEvent","watchOnUpdateEvent","watchOnDeleteEvent","watchOnGetCategories","calendarSaga"],"mappings":"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","sourcesContent":["import { takeEvery, put, call, all, fork } from \"redux-saga/effects\"\n\n// Calender Redux States\nimport {\n  ADD_NEW_EVENT,\n  DELETE_EVENT,\n  GET_CATEGORIES,\n  GET_EVENTS,\n  UPDATE_EVENT,\n} from \"./actionTypes\"\nimport {\n  apiSuccess, apiFail,\n  updateEventSuccess,\n  updateEventFail,\n  deleteEventSuccess,\n  deleteEventFail,\n  getCategoriesSuccess,\n  getCategoriesFail,\n} from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport {\n  getEvents,\n  addNewEvent,\n  updateEvent,\n  deleteEvent,\n  getCategories,\n} from \"../../helpers/fakebackend_helper\"\n\nfunction* fetchEvents() {\n  try {\n    const response = yield call(getEvents);\n    yield put(apiSuccess(GET_EVENTS, response));\n  } catch (error) {\n    yield put(apiFail(GET_EVENTS, error));\n  }\n}\n\nfunction* onAddNewEvent({ payload: event }) {\n  try {\n    const response = yield call(addNewEvent, event)\n    yield put(apiSuccess(ADD_NEW_EVENT, response))\n  } catch (error) {\n    yield put(apiFail(ADD_NEW_EVENT, error))\n  }\n}\n\nfunction* onUpdateEvent({ payload: event }) {\n  try {\n    const response = yield call(updateEvent, event)\n    yield put(updateEventSuccess(response))\n  } catch (error) {\n    yield put(updateEventFail(error))\n  }\n}\n\nfunction* onDeleteEvent({ payload: event }) {\n  try {\n    const response = yield call(deleteEvent, event)\n    yield put(deleteEventSuccess(response))\n  } catch (error) {\n    yield put(deleteEventFail(error))\n  }\n}\n\nfunction* onGetCategories() {\n  try {\n    const response = yield call(getCategories)\n    yield put(getCategoriesSuccess(response))\n  } catch (error) {\n    yield put(getCategoriesFail(error))\n  }\n}\n\nexport function* watchFetchEvents() {\n  yield takeEvery(GET_EVENTS, fetchEvents);\n}\n\nexport function* watchOnAddNewEvent() {\n  yield takeEvery(ADD_NEW_EVENT, onAddNewEvent);\n}\n\nexport function* watchOnUpdateEvent() {\n  yield takeEvery(UPDATE_EVENT, onUpdateEvent);\n}\nexport function* watchOnDeleteEvent() {\n  yield takeEvery(DELETE_EVENT, onDeleteEvent);\n}\nexport function* watchOnGetCategories() {\n  yield takeEvery(GET_CATEGORIES, onGetCategories);\n}\n\nfunction* calendarSaga() {\n  yield all([fork(watchFetchEvents)]);\n  yield all([fork(watchOnAddNewEvent)]);\n  yield all([fork(watchOnUpdateEvent)]);\n  yield all([fork(watchOnDeleteEvent)]);\n  yield all([fork(watchOnGetCategories)]);\n}\n\nexport default calendarSaga\n"]},"metadata":{},"sourceType":"module"}