{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport { calenderDefaultCategories, chats, contacts, cryptoOrders, events, groups, invoiceList, messages, projects, inboxmails, starredmails, importantmails, draftmails, sentmails, trashmails, tasks, userProfile, users as members, wallet, janTopSellingData, decTopSellingData, novTopSellingData, octTopSellingData, janEarningData, decEarningData, novEarningData, octEarningData } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios);\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([\"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...user[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails]);\n        } else {\n          reject([400, \"Cannot get inboxmails\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail]);\n        } else {\n          reject([400, \"Cannot delete inboxmail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails]);\n        } else {\n          reject([400, \"Cannot get starredmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails]);\n        } else {\n          reject([400, \"Cannot get importantmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails]);\n        } else {\n          reject([400, \"Cannot get trashmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails]);\n        } else {\n          reject([400, \"Cannot get draftmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails]);\n        } else {\n          reject([400, \"Cannot get sentmails\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot add user\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot update user\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user]);\n        } else {\n          reject([400, \"Cannot delete user\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot update project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project]);\n        } else {\n          reject([400, \"Cannot delete project\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList]);\n        } else {\n          reject([400, \"Cannot get invoices\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const invoice = invoiceList.find(invoice => invoice.id.toString() === params.id.toString());\n          resolve([200, invoice]);\n        } else {\n          reject([400, \"Cannot get invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects]);\n        } else {\n          reject([400, \"Cannot get projects\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const project = projects.find(project => project.id.toString() === params.id.toString());\n          resolve([200, project]);\n        } else {\n          reject([400, \"Cannot get project detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks]);\n        } else {\n          reject([400, \"Cannot get tasks\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members]);\n        } else {\n          reject([400, \"Cannot get users\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile]);\n        } else {\n          reject([400, \"Cannot get user profile\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        params\n      } = config;\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          var data = [];\n\n          if (params.month === \"jan\") {\n            data = janTopSellingData;\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData;\n          } else if (params.month === \"nov\") {\n            data = novTopSellingData;\n          } else if (params.month === \"oct\") {\n            data = octTopSellingData;\n          }\n\n          resolve([200, data]);\n        } else {\n          reject([400, \"Cannot get selling data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        params\n      } = config;\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          var data = [];\n\n          if (params.month === \"jan\") {\n            data = janEarningData;\n          } else if (params.month === \"dec\") {\n            data = decEarningData;\n          } else if (params.month === \"nov\") {\n            data = novEarningData;\n          } else if (params.month === \"oct\") {\n            data = octEarningData;\n          }\n\n          resolve([200, data]);\n        } else {\n          reject([400, \"Cannot get earning data\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["/Users/nawazdhandala/Documents/Projects/DCX/app/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","chats","contacts","cryptoOrders","events","groups","invoiceList","messages","projects","inboxmails","starredmails","importantmails","draftmails","sentmails","trashmails","tasks","userProfile","users","members","wallet","janTopSellingData","decTopSellingData","novTopSellingData","octTopSellingData","janEarningData","decEarningData","novEarningData","octEarningData","uid","username","role","password","email","fakeBackend","mock","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","onGet","GET_EVENTS","GET_INBOX_MAILS","ADD_NEW_INBOX_MAIL","inboxmail","data","onDelete","DELETE_INBOX_MAIL","GET_STARRED_MAILS","GET_IMPORTANT_MAILS","GET_TRASH_MAILS","GET_DRAFT_MAILS","GET_SENT_MAILS","ADD_NEW_USER","onPut","UPDATE_USER","DELETE_USER","ADD_NEW_PROJECT","project","UPDATE_PROJECT","DELETE_PROJECT","ADD_NEW_EVENT","event","UPDATE_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_CHATS","GET_GROUPS","GET_CONTACTS","RegExp","GET_MESSAGES","params","filteredMessages","msg","roomId","ADD_MESSAGE","GET_WALLET","GET_CRYPTO_ORDERS","GET_INVOICES","GET_INVOICE_DETAIL","invoice","find","id","toString","GET_PROJECTS","GET_PROJECT_DETAIL","GET_TASKS","GET_USERS","GET_USER_PROFILE","TOP_SELLING_DATA","month","GET_EARNING_DATA"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\nimport {\n  calenderDefaultCategories,\n  chats,\n  contacts,\n  cryptoOrders,\n  events,\n  groups,\n  invoiceList,\n  messages,\n  projects,\n  inboxmails,\n  starredmails,\n  importantmails,\n  draftmails,\n  sentmails,\n  trashmails,\n  tasks,\n  userProfile,\n  users as members,\n  wallet,\n  janTopSellingData,\n  decTopSellingData,\n  novTopSellingData,\n  octTopSellingData,\n  janEarningData,\n  decEarningData,\n  novEarningData,\n  octEarningData,\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Updated Successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Updated Successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails])\n        } else {\n          reject([400, \"Cannot get inboxmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail])\n        } else {\n          reject([400, \"Cannot delete inboxmail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails])\n        } else {\n          reject([400, \"Cannot get starredmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails])\n        } else {\n          reject([400, \"Cannot get importantmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails])\n        } else {\n          reject([400, \"Cannot get trashmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails])\n        } else {\n          reject([400, \"Cannot get draftmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails])\n        } else {\n          reject([400, \"Cannot get sentmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot add user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot update user\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user])\n        } else {\n          reject([400, \"Cannot delete user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot update project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project])\n        } else {\n          reject([400, \"Cannot delete project\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats])\n        } else {\n          reject([400, \"Cannot get chats\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups])\n        } else {\n          reject([400, \"Cannot get groups\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts])\n        } else {\n          reject([400, \"Cannot get contacts\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const filteredMessages = messages.filter(\n            msg => msg.roomId === params.roomId\n          )\n          resolve([200, filteredMessages])\n        } else {\n          reject([400, \"Cannot get messages\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data])\n        } else {\n          reject([400, \"Cannot add message\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList])\n        } else {\n          reject([400, \"Cannot get invoices\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const invoice = invoiceList.find(\n            invoice => invoice.id.toString() === params.id.toString()\n          )\n          resolve([200, invoice])\n        } else {\n          reject([400, \"Cannot get invoice\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects])\n        } else {\n          reject([400, \"Cannot get projects\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const project = projects.find(\n            project => project.id.toString() === params.id.toString()\n          )\n          resolve([200, project])\n        } else {\n          reject([400, \"Cannot get project detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members])\n        } else {\n          reject([400, \"Cannot get users\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile])\n        } else {\n          reject([400, \"Cannot get user profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n\n          var data = []\n          if (params.month === \"jan\") {\n            data = janTopSellingData\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData\n          } else if (params.month === \"nov\") {\n            data = novTopSellingData\n          } else if (params.month === \"oct\") {\n            data = octTopSellingData\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get selling data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const { params } = config\n          var data = []\n          if (params.month === \"jan\") {\n            data = janEarningData\n          } else if (params.month === \"dec\") {\n            data = decEarningData\n          } else if (params.month === \"nov\") {\n            data = novEarningData\n          } else if (params.month === \"oct\") {\n            data = octEarningData\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get earning data\"])\n        }\n      })\n    })\n  })\n}\n\nexport default fakeBackend\n"]},"metadata":{},"sourceType":"module"}